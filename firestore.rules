rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAll(['admin']);
    }
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth !=null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['event','group']);
    }
    match /families/{familyId} {
    	allow read, write: if true;
    }
    match /events/{eventId} {
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['event']);
      allow write: if request.auth != null && (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendees']));
      allow read: if true;
    }
    match /groups/{groupId} {
    	allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['group']);
      allow write: if request.auth != null && (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendees']));
    }
    match /content/{contentId} {
    	allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['content']);
    }
  }
}